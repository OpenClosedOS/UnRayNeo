1. RanNeo X2 AR glasses run on Android and can be connected to a computer using scrcpy for screen viewing and control.

2. No specific MCP (Model Context Protocol) for screen sharing was found in available repositories, but potential alternatives include:
   - Creating a custom MCP for screenshot sharing
   - Using existing tools like scrot with a file-sharing MCP
   - Using scrcpy with manual screenshots or recordings

3. Potentially useful MCPs for the project:
   - Android MCP Server (https://github.com/minhalvp/android-mcp-server) - May be useful for Android-based AR glasses
   - NutJS Windows Control MCP (https://github.com/Cheffromspace/nutjs-windows-control) - For programmatic control over system operations

4. Successfully set up the Android MCP server to interact with RanNeo X2 AR glasses:
   - The server requires proper configuration in the MCP config file
   - The exact format that worked was:
     ```json
     "android": {
         "command": "uv",
         "args": [
             "--directory", 
             "/home/user/projects/UnRayNeo/android-mcp-server", 
             "run", 
             "server.py"
         ]
     }
     ```
   - Adding `adb tcpip 5555` before starting the server helps ensure proper connection

5. RanNeo X2 AR glasses system information:
   - Running RayNeo OS based on Android 11 (SDK 30)
   - Build version: 0.24.6.28
   - Security patch: 2022-05-01 (outdated)
   - OEM unlocking is allowed (`sys.oem_unlock_allowed: 1`)

6. Identified potential Chinese spyware packages:
   - `com.ffalconxr.mercury.launcher`
   - `com.ffalcon.navigation`
   - `com.ffalcon.translate`
   - `com.zhiliaoapp.musically` (TikTok)
   - `com.leiniao.camera` and `com.leiniao.scanner`
   - Various RayNeo games and applications

7. When killing processes in scripts, always use `|| true` to ensure the command succeeds even if there's nothing to kill:
   ```bash
   pkill -f process_name || true
   ```

8. For debugging MCP server issues, creating log files with timestamps is helpful:
   ```bash
   uv run server.py 2>&1 | tee /tmp/mcp/$(date +"%Y-%m-%d_%H-%M-%S").log
   ```

9. Successfully accessed native settings on RanNeo X2 AR glasses:
   - Can launch settings app with `am start -n com.android.settings/.Settings`
   - Can access developer options with `am start -a android.settings.APPLICATION_DEVELOPMENT_SETTINGS`
   - USB debugging is enabled by default (`settings get global adb_enabled` returns `1`)
   - The glasses are sensitive to physical disconnections and may require a reset if the magnetic cable is unplugged during an active ADB session

10. Successfully captured and saved screenshots from the RanNeo X2 AR glasses:
    - Used `adb shell screencap -p /sdcard/screenshot.png && adb pull /sdcard/screenshot.png [destination]` to capture and save screenshots
    - Organized screenshots in `/home/user/projects/UnRayNeo/secret/screenshots/{DATE}/{TIME}.png` format
    - Observed Chinese text in system interfaces, confirming the presence of Chinese software

11. Translated Chinese system messages:
    - Identified loading screen with message "正在初始化...请等待" which translates to "Initializing... Please wait"
    - This confirms the device is running Chinese software that needs to be replaced in the UnRayNeo project

12. WiFi functionality on RanNeo X2 AR glasses:
     - Can be enabled using multiple ADB commands:
       ```bash
       adb shell svc wifi enable
       adb shell cmd wifi set-wifi-enabled enabled
       adb shell settings put global wifi_on 1
       ```
     - WiFi scans can be triggered with: `adb shell cmd wifi start-scan`
     - Available networks can be listed with: `adb shell cmd wifi list-scan-results`
     - Can connect to networks using: `adb shell cmd wifi connect-network <ssid> <security> <password>`
       - For WPA2 networks: `adb shell cmd wifi connect-network "SSID" wpa2 "PASSWORD"`
       - For open networks: `adb shell cmd wifi connect-network "SSID" open`
     - Current connection can be checked with: `adb shell cmd wifi status`
